import sqlite3
from datetime import datetime, timedelta
import random
db = sqlite3.connect("barberdb.db")

def generate_fake_data(db_connection, num_customers=20, num_bookings=50):
    cursor = db_connection.cursor()

    # 1. Clean existing data
    cursor.executescript("""
        DELETE FROM Booking;
        DELETE FROM Customer;
        DELETE FROM Haircut;
    """)

    # 2. Create haircut services
    haircuts = [
        ("Men's Cut", 25.00, 30),
        ("Women's Cut", 45.00, 45),
        ("Beard Trim", 15.00, 15),
        ("Kids Cut", 20.00, 25),
        ("Hair Color", 60.00, 90)
    ]
    cursor.executemany(
        "INSERT INTO Haircut (Haircut_Name, Price, Estimated_Time) VALUES (?, ?, ?)",
        haircuts
    )

    # 3. Generate customers
    first_names = ["James", "Emma", "Liam", "Olivia", "Noah", "Ava", "William", "Sophia"]
    last_names = ["Smith", "Johnson", "Williams", "Brown", "Jones", "Garcia", "Miller"]

    for _ in range(num_customers):
        cursor.execute(
            "INSERT INTO Customer (FirstName, Surname, Email, Hashed_Password, Salt, Date_Of_Birth) "
            "VALUES (?, ?, ?, ?, ?, ?)",
            (
                random.choice(first_names),
                random.choice(last_names),
                f"{random.choice(first_names).lower()}{random.randint(1, 100)}@example.com",
                "placeholder_hash",
                "placeholder_salt",
                random_date("1980-01-01", "2005-12-31").strftime("%Y-%m-%d")
            )
        )

    # 4. Create bookings with unique time slots
    haircut_ids = [row[0] for row in cursor.execute("SELECT HaircutID FROM Haircut").fetchall()]
    customer_ids = [row[0] for row in cursor.execute("SELECT CustomerID FROM Customer").fetchall()]

    # Generate all possible time slots
    all_slots = []
    for date in [random_date("2023-01-01", "2023-12-31").strftime("%Y-%m-%d")
                 for _ in range(num_bookings // 10 + 1)]:  # Spread across multiple dates
        for hour in range(9, 18):  # 9AM to 5PM
            for minute in ['00']:
                all_slots.append((date, f"{hour:02d}:{minute}"))

    random.shuffle(all_slots)

    for i in range(min(num_bookings, len(all_slots))):  # Don't exceed available slots
        date, time = all_slots[i]
        cursor.execute(
            "INSERT INTO Booking (Date, Time, CustomerID, HaircutID, Locked) "
            "VALUES (?, ?, ?, ?, ?)",
            (
                date,
                time,
                random.choice(customer_ids),
                random.choice(haircut_ids),
                1  # Mark as confirmed
            )
        )

    db_connection.commit()
    print(f"âœ… Generated: {num_customers} customers, {len(haircuts)} haircuts, "
          f"{min(num_bookings, len(all_slots))} bookings")


def random_date(start, end):
    start_date = datetime.strptime(start, "%Y-%m-%d")
    end_date = datetime.strptime(end, "%Y-%m-%d")
    delta = end_date - start_date
    random_days = random.randint(0, delta.days)
    return start_date + timedelta(days=random_days)

generate_fake_data(db, num_customers=30, num_bookings=100)  # Will create up to 100 valid bookings
